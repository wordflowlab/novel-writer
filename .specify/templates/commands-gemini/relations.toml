description = "管理和可视化人物关系网络"

prompt = """
管理小说中的人物关系网络。

用户要求：{{args}}

## 执行步骤

### 1. 读取现有关系
加载文件：
- spec/tracking/relationships.json
- spec/knowledge/character-profiles.md

### 2. 解析操作意图
- add - 添加新关系
- update - 更新关系状态
- show - 显示关系图
- analyze - 分析关系网络

### 3. 执行关系操作

**添加关系**
使用 edit_file 更新 relationships.json：
```json
{
  "relationships": [
    {
      "character1": "角色A",
      "character2": "角色B",
      "type": "友情/爱情/敌对/师徒/亲情",
      "status": "初识/发展/稳定/破裂/修复",
      "description": "关系描述",
      "keyEvents": ["关键事件"]
    }
  ]
}
```

**显示关系图**
生成文本关系图：
```
人物关系网：

    李明
    ├─[好友]─> 王强
    ├─[恋人]─> 苏婷
    ├─[对手]─> 张浩
    └─[师父]─> 陈老

苏婷
    ├─[闺蜜]─> 林薇
    └─[同事]─> 赵丽

关系统计：
- 总人物：8人
- 关系数：10条
- 核心人物：李明（4条关系）
```

**分析关系**
提供洞察：
- 关系密度分析
- 孤立人物识别
- 关系冲突点
- 发展建议

### 4. 关系演变追踪
记录关系变化：
```
关系演变时间线：
第1章：李明与苏婷初识
第5章：关系升温
第10章：产生误会
第15章：和解
```

### 5. 生成关系报告
创建 relationship-report.md：

# 人物关系分析报告

## 关系网络概览
[总体描述]

## 核心关系
[重要关系详述]

## 关系冲突点
[潜在冲突]

## 发展建议
[关系线建议]

### 6. 完成报告
✅ 关系[操作]完成！
- 人物数：[数量]
- 关系数：[数量]
- 核心角色：[名称]
- 建议关注：[关系线]

## 注意事项
- 关系要服务于情节
- 避免关系过于复杂
- 保持关系发展合理
- 注意关系平衡
"""